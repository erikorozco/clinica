package farmacia;
import backend.FarmaciaDAO;
import java.awt.event.KeyEvent;
//import java.time.LocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


public class Farmacia extends javax.swing.JPanel {
    //Constructores globales.
    Ticket ticket;

    /**
     * Creates new form Interface
     */
    public Farmacia() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Ing = new javax.swing.JPanel();
        InLabPro = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        InMg = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        InAgregar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        InNomCom = new javax.swing.JTextField();
        InNomGen = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        InCantidad = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        InPres = new javax.swing.JTextField();
        inv = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        IvBucar = new javax.swing.JButton();
        IvEliminar = new javax.swing.JButton();
        BuscarenInventario = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Inventario = new javax.swing.JTable();
        IvModificar = new javax.swing.JButton();
        nuevaCantidad = new javax.swing.JSpinner();
        salmedi = new javax.swing.JPanel();
        NomGendeBusq = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        SalImprimir = new javax.swing.JButton();
        SalCant = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        SalAgregar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Ticket = new javax.swing.JTable();
        SalEliminar = new javax.swing.JButton();
        SalBuscar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        ResBus = new javax.swing.JTable();
        SalCant1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        InExp = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();

        jScrollPane4.setViewportView(jEditorPane1);

        setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setFont(new java.awt.Font("EngraversGothic BT", 0, 24)); // NOI18N

        Ing.setBackground(new java.awt.Color(93, 183, 121));
        Ing.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("EngraversGothic BT", 0, 18))); // NOI18N
        Ing.setToolTipText("");
        Ing.setName(""); // NOI18N
        Ing.setPreferredSize(new java.awt.Dimension(911, 500));

        InLabPro.setFont(new java.awt.Font("EngraversGothic BT", 0, 24)); // NOI18N

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nombre Genérico");

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombre Comercial");

        InMg.setFont(new java.awt.Font("EngraversGothic BT", 0, 24)); // NOI18N
        InMg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InMgActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Laboratorio de procedencia");

        InAgregar.setFont(new java.awt.Font("EngraversGothic BT", 0, 24)); // NOI18N
        InAgregar.setText("Agregar");
        InAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InAgregarActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Miligramos");

        InNomCom.setFont(new java.awt.Font("EngraversGothic BT", 0, 24)); // NOI18N

        InNomGen.setFont(new java.awt.Font("EngraversGothic BT", 0, 24)); // NOI18N

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Cantidad");

        InCantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Presentación");

        InPres.setFont(new java.awt.Font("EngraversGothic BT", 0, 24)); // NOI18N
        InPres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InPresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IngLayout = new javax.swing.GroupLayout(Ing);
        Ing.setLayout(IngLayout);
        IngLayout.setHorizontalGroup(
            IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IngLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IngLayout.createSequentialGroup()
                        .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(InNomGen, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(InNomCom, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(InLabPro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(InMg, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InPres, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(InAgregar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(270, Short.MAX_VALUE))
        );
        IngLayout.setVerticalGroup(
            IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IngLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(InNomGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(InNomCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(InLabPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InMg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(IngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InPres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(InAgregar)
                .addContainerGap(154, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingreso de Medicamento ", Ing);

        inv.setBackground(new java.awt.Color(93, 183, 121));
        inv.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel9.setText("Medicamento en existencia");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(628, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        IvBucar.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        IvBucar.setText("Buscar");
        IvBucar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IvBucarActionPerformed(evt);
            }
        });

        IvEliminar.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        IvEliminar.setText("Eliminar");
        IvEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IvEliminarActionPerformed(evt);
            }
        });

        BuscarenInventario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BuscarenInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarenInventarioActionPerformed(evt);
            }
        });
        BuscarenInventario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BuscarenInventarioKeyPressed(evt);
            }
        });

        Inventario.setFont(new java.awt.Font("EngraversGothic BT", 0, 14)); // NOI18N
        Inventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre Genérico", "Nombre Comercial", "Laboratorio de Procedencia ", "Fecha de Ingreso", "Miligramos", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Inventario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(Inventario);
        if (Inventario.getColumnModel().getColumnCount() > 0) {
            Inventario.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        IvModificar.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        IvModificar.setText("Agregar cantidad");
        IvModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IvModificarActionPerformed(evt);
            }
        });

        nuevaCantidad.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout invLayout = new javax.swing.GroupLayout(inv);
        inv.setLayout(invLayout);
        invLayout.setHorizontalGroup(
            invLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(invLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invLayout.createSequentialGroup()
                        .addComponent(BuscarenInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(IvBucar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(invLayout.createSequentialGroup()
                        .addComponent(IvEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IvModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nuevaCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        invLayout.setVerticalGroup(
            invLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(invLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IvBucar)
                    .addComponent(BuscarenInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(invLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(invLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IvEliminar)
                            .addComponent(IvModificar)))
                    .addGroup(invLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(nuevaCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(235, 235, 235))
        );

        jTabbedPane1.addTab("Inventario", inv);

        salmedi.setBackground(new java.awt.Color(93, 183, 121));
        salmedi.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        NomGendeBusq.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        NomGendeBusq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NomGendeBusqKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Buscador");

        SalImprimir.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        SalImprimir.setText("Imprimir Ticket ");
        SalImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalImprimirActionPerformed(evt);
            }
        });

        SalCant.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        SalCant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalCantActionPerformed(evt);
            }
        });
        SalCant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SalCantKeyPressed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Cantidad");

        SalAgregar.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        SalAgregar.setText("Agregar ");
        SalAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalAgregarActionPerformed(evt);
            }
        });

        Ticket.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        Ticket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre genérico", "Miligramos", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Ticket.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(Ticket);
        Ticket.getAccessibleContext().setAccessibleName("");

        SalEliminar.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        SalEliminar.setText("Eliminar");
        SalEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalEliminarActionPerformed(evt);
            }
        });

        SalBuscar.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        SalBuscar.setText("Buscar");
        SalBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalBuscarActionPerformed(evt);
            }
        });

        ResBus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre Genérico ", "Miligramos", "Disponibles"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ResBus.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(ResBus);

        SalCant1.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        SalCant1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalCant1ActionPerformed(evt);
            }
        });
        SalCant1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SalCant1KeyPressed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Su aportación");

        InExp.setFont(new java.awt.Font("EngraversGothic BT", 0, 18)); // NOI18N
        InExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InExpActionPerformed(evt);
            }
        });
        InExp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                InExpKeyPressed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("EngraversGothic BT", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("N° Expediente");

        javax.swing.GroupLayout salmediLayout = new javax.swing.GroupLayout(salmedi);
        salmedi.setLayout(salmediLayout);
        salmediLayout.setHorizontalGroup(
            salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, salmediLayout.createSequentialGroup()
                .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(salmediLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(salmediLayout.createSequentialGroup()
                                .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(salmediLayout.createSequentialGroup()
                                        .addComponent(SalCant, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(InExp, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(salmediLayout.createSequentialGroup()
                                        .addComponent(SalEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(60, 60, 60)
                                        .addComponent(SalImprimir)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, salmediLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(salmediLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(SalCant1)
                                .addGap(18, 18, 18)
                                .addComponent(SalAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(salmediLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(salmediLayout.createSequentialGroup()
                                        .addComponent(NomGendeBusq)
                                        .addGap(18, 18, 18)
                                        .addComponent(SalBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))))
                        .addGap(158, 158, 158)))
                .addContainerGap())
        );
        salmediLayout.setVerticalGroup(
            salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salmediLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NomGendeBusq, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(SalBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SalAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(SalCant1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SalCant, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel15)
                    .addComponent(InExp, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(salmediLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SalEliminar)
                    .addComponent(SalImprimir))
                .addGap(45, 45, 45))
        );

        jTabbedPane1.addTab("Salida de Medicamento ", salmedi);

        titulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmacia/Imagenes/Original.PNG"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(titulo))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Evento 'on click' del botón Agregar.
     * Verifica los campos de texto disponibles así como su validez antes
     * de crear un nuevo medicamento.
     * @param Evento recibido.
     */
    private void InAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InAgregarActionPerformed
        //Mediante una serie de condicionales con condicionales agrupados, se
        //verifican los campos disponibles.
        if(InNomGen.getText().isEmpty() || InNomCom.getText().isEmpty() || InLabPro.getText().isEmpty() || InMg.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Revise que todos los campos están correctamente llenados",
                    "Error en el llenado de formulario.", JOptionPane.ERROR_MESSAGE);
        }else if(!cadenaEsDoble(InMg.getText())){
            JOptionPane.showMessageDialog(null,
                    "Revise que haya escrito correctamente la cantidad del ingrediente en el medicamento",
                    "Error en el llenado del formulario.",
                    JOptionPane.ERROR_MESSAGE);
        }else if(Double.parseDouble(InMg.getText()) <= 0){
            JOptionPane.showMessageDialog(null,
                    "Revise que haya escrito correctamente la cantidad del ingrediente en el medicamento",
                    "Error en el llenado del formulario.",
                    JOptionPane.ERROR_MESSAGE);
        }else if((Integer)InCantidad.getValue() <= 0){
            JOptionPane.showMessageDialog(null,
                    "Debe de agregar al menos un producto al inventario.",
                    "Error en el llenado del formulario.",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }else{
            
            //Luego de la validación se procede a crear el nuevo medicamento.
            Integer nuevoID;
            try{
                FarmaciaDAO fdao = new FarmaciaDAO();
                Medicamento medicamento = new Medicamento();
                medicamento.setCantidad((Integer)InCantidad.getValue());
                medicamento.setComercial(InNomCom.getText());
                medicamento.setComponente(InNomGen.getText());
                medicamento.setFechaIngreso(new java.sql.Date(Calendar.getInstance().getTime().getTime()));
                medicamento.setGenerico(InNomGen.getText());
                medicamento.setLaboratorio(InLabPro.getText());
                medicamento.setMiligramos(Double.valueOf(InMg.getText()));
                medicamento.setPresentacion(this.InPres.getText());

                nuevoID = fdao.guardarMedicamento(medicamento);
                
                JOptionPane.showMessageDialog(null, "Se ha guardado correctamente el medicamento #"+ nuevoID +".");
                InCantidad.setValue(0);
                InLabPro.setText(null);
                InMg.setText(null);
                InNomCom.setText(null);
                InNomGen.setText(null);
                InPres.setText(null);
            
                //En caso de error, muestra el mensaje correspondiente.
            }catch(Exception re){
                JOptionPane.showMessageDialog(null,
                    "No se pudo conectar a la base de datos: " + re.getMessage(),
                    "Error en la alta de medicamentos.",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_InAgregarActionPerformed
    /**
     * Evento 'on click' del botón IvBuscar que busca a través del método 
     * this.buscar.
     * @param evt Evento del click.
     */
    private void IvBucarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IvBucarActionPerformed
            buscar(BuscarenInventario.getText(), Inventario);
    }//GEN-LAST:event_IvBucarActionPerformed
    
    /**
     * Evento 'on click' del botón IvEliminar que elimina un medicamento.
     * @param evt Evento del click.
     */
    private void IvEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IvEliminarActionPerformed
        try{
            //Con el método this.getSelectedID, se extrae el ID seleccionado
            //de la tabla.
            Integer idSeleccionado = this.getSelectedID(Inventario);
            //Verifica la validez del campo.
            if(idSeleccionado < 0){
                JOptionPane.showMessageDialog(null,
                        "Seleccione el medicamento de la lista a eliminar.",
                        "Error dando de baja un medicamento.",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
            //Si todo es válido, se elimina el elemento.
            Integer res = JOptionPane.showConfirmDialog(null, "¿Realmente desa eliminar este medicamento?");
            if(res == JOptionPane.YES_OPTION){
                FarmaciaDAO fdao = new FarmaciaDAO();
                fdao.eliminarMedicamento(idSeleccionado);
                //Y se limpia la tabla.
                DefaultTableModel tm = (DefaultTableModel)Inventario.getModel();
                tm.setRowCount(0);
            }
            else{
              
            }
        }catch(RuntimeException er){
            JOptionPane.showMessageDialog(null,
                    "Error en la base de datos: " + er.getMessage(),
                    "Error dando de baja un medicamento.",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_IvEliminarActionPerformed

    private void InMgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InMgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InMgActionPerformed

    private void SalCantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalCantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SalCantActionPerformed

    private void BuscarenInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarenInventarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BuscarenInventarioActionPerformed

    private void SalCant1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalCant1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SalCant1ActionPerformed

    private void InExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InExpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InExpActionPerformed

    /**
     * Realiza una búsqueda en una tabla con campos reducidos con el método
     * this.busquedaMin.
     * @param evt Evento del click.
     */
    private void SalBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalBuscarActionPerformed
        busquedaMin(NomGendeBusq.getText(), ResBus);
    }//GEN-LAST:event_SalBuscarActionPerformed
    
    /**
     * Agrega elementos al ticket de compra.
     * @param evt Evento del click.
     */
    private void SalAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalAgregarActionPerformed
        agregarATicket();
    }//GEN-LAST:event_SalAgregarActionPerformed
    
    /**
     * Realiza una modificación de un medicamento.
     * @param evt Evento del click.
     */
    private void IvModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IvModificarActionPerformed
        try{
            Integer idSeleccionado = this.getSelectedID(Inventario);
            if(idSeleccionado < 0){
                JOptionPane.showMessageDialog(null,
                    "Seleccione el medicamento de la lista a actualizar.",
                    "Error dando de baja un medicamento.",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            Integer cantidad = this.obtenerCantidad(Inventario);
            if(cantidad < 0){
                JOptionPane.showMessageDialog(null,
                    "No puede agregar cantidades negativas.",
                    "Error agregando elementos.",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            FarmaciaDAO fdao = new FarmaciaDAO();
            fdao.actualizarCantidad(idSeleccionado, cantidad);
            JOptionPane.showMessageDialog(null,
                    "Se ha actualizado la cantidad disponible del medicamento correctamente.");
            this.buscar(this.BuscarenInventario.getText(), this.Inventario);
        }catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null,
                    "Verifique los campos. ",
                    "Error agregando elementos.",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_IvModificarActionPerformed
    /**
     * Limpia los campos del formulario.
     * @param evt Evento del click.
     */
    private void SalEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalEliminarActionPerformed
        this.eliminarTicket();
    }//GEN-LAST:event_SalEliminarActionPerformed
    
    /**
     * Finaliza el proceso de compra
     * @param evt Evento del click.
     */
    private void SalImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalImprimirActionPerformed
        this.finalizarCompra();
    }//GEN-LAST:event_SalImprimirActionPerformed
    
    /**
     * Busca un elemento en el inventario ligado al presionar enter.
     * @param evt Evento del click.
     */
    private void BuscarenInventarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BuscarenInventarioKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            buscar(BuscarenInventario.getText(), Inventario);
        }
    }//GEN-LAST:event_BuscarenInventarioKeyPressed
    /**
     * Busca un elemento en el inventario ligado al presionar enter.
     * @param evt Evento del click.
     */
    private void NomGendeBusqKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NomGendeBusqKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            busquedaMin(BuscarenInventario.getText(), ResBus);
        }
    }//GEN-LAST:event_NomGendeBusqKeyPressed
    
    /**
     * Agregar al ticket ligado al presionar enter.
     * @param evt Evento del click.
     */
    private void SalCant1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SalCant1KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            agregarATicket();
        }
    }//GEN-LAST:event_SalCant1KeyPressed
    
    /**
     * Finalizar compra ligado al presionar enter.
     * @param evt Evento del click.
     */
    private void InExpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InExpKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            this.finalizarCompra();
        }
    }//GEN-LAST:event_InExpKeyPressed
    /**
     * Finalizar compra ligado al presionar enter.
     * @param evt Evento del click.
     */
    private void SalCantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SalCantKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            this.finalizarCompra();
        }
    }//GEN-LAST:event_SalCantKeyPressed

    private void InPresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InPresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InPresActionPerformed

    /**
     * Determin si una cadena corresponde a un número flotante.
     * @param s Cadena a comprobar.
     * @return Valor booleano de la veracidad de esta función.
     */
    private  boolean cadenaEsDoble(String s) {
        try{
            Double.valueOf(s);
            return true;
        }catch (NumberFormatException ne){
            return false;
        }
    }
    
    /**
     * Devuelve el ID del medicamento dentro de la fila seleccionada.
     * @param tabla JTable donde se almacenan los resultados.
     * @return ID del medicamento seleccionado.
     */
    private Integer getSelectedID(JTable tabla){
        Integer fila = tabla.getSelectedRow();
        if(fila < 0){
            return fila;
        }
        Integer id = (Integer)tabla.getValueAt(fila, 0);
        return id;
    }
    
    /**
     * Determina la cantidad disponible de un medicamento en una JTable.
     * @param tabla El JTable que contiene la lista.
     * @return Entero correspondiente a la cantidad disponible.
     */
    private Integer obtenerCantidad(JTable tabla){
        Integer cant = (Integer)this.nuevaCantidad.getValue();
        return cant;
    }
    /**
     * Realiza una búsqueda en la base de datos e inserta los resultados
     * en un JTable.
     * @param busqueda Cadena de caracteres a buscar.
     * @param tabla Tabla donde se insertarán los resultados obtenidos.
     */
    private void buscar(String busqueda, JTable tabla){
        try{
            FarmaciaDAO fdao = new FarmaciaDAO();
            
            Collection<Medicamento> resultados = fdao.buscar(busqueda.toUpperCase());
            Iterator<Medicamento> it = resultados.iterator();
            Medicamento actual;
            DefaultTableModel tm = (DefaultTableModel)tabla.getModel();
            tm.setRowCount(0);
            
            //Dentro de un iterador se insertan los objetos obtenidos en forma
            //de arreglo.
            while(it.hasNext()){
                actual = it.next();
                tm.addRow(actual.toObjectArray());
            }
        }catch(RuntimeException er){
            JOptionPane.showMessageDialog(null,
                "Error de ejecución: " + er.getMessage(),
                "Error en la búsqueda.",
                JOptionPane.ERROR_MESSAGE);
            er.printStackTrace();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BuscarenInventario;
    private javax.swing.JButton InAgregar;
    private javax.swing.JSpinner InCantidad;
    private javax.swing.JTextField InExp;
    private javax.swing.JTextField InLabPro;
    private javax.swing.JTextField InMg;
    private javax.swing.JTextField InNomCom;
    private javax.swing.JTextField InNomGen;
    private javax.swing.JTextField InPres;
    private javax.swing.JPanel Ing;
    private javax.swing.JTable Inventario;
    private javax.swing.JButton IvBucar;
    private javax.swing.JButton IvEliminar;
    private javax.swing.JButton IvModificar;
    private javax.swing.JTextField NomGendeBusq;
    private javax.swing.JTable ResBus;
    private javax.swing.JButton SalAgregar;
    private javax.swing.JButton SalBuscar;
    private javax.swing.JTextField SalCant;
    private javax.swing.JTextField SalCant1;
    private javax.swing.JButton SalEliminar;
    private javax.swing.JButton SalImprimir;
    private javax.swing.JTable Ticket;
    private javax.swing.JPanel inv;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSpinner nuevaCantidad;
    private javax.swing.JPanel salmedi;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
    /**
     * Realiza una búsqueda en la base de datos e inserta los resultados
     * en un JTable.
     * @param busqueda Cadena de caracteres a buscar.
     * @param tabla Tabla donde se insertarán los resultados obtenidos.
     */
    private void busquedaMin(String text, JTable ResBus) {
        try{
            FarmaciaDAO fdao = new FarmaciaDAO();
            
            Collection<Medicamento> resultados = fdao.buscar(NomGendeBusq.getText().toUpperCase());
            Iterator<Medicamento> it = resultados.iterator();
            Medicamento actual;
            DefaultTableModel tm = (DefaultTableModel)ResBus.getModel();
            tm.setRowCount(0);
            while(it.hasNext()){
                actual = it.next();
                tm.addRow(actual.toReducedObjectArray());
            }
        }catch(RuntimeException er){
            er.printStackTrace();
        }
    }
    /**
     * Agrega un nuevo medicamento al ticket.
     */
    private void agregarATicket(){
        try{
            //Se crean los conectores.
            FarmaciaDAO fdao = new FarmaciaDAO();
            Medicamento m = fdao.buscarMedicamento(this.getSelectedID(ResBus));
            //Se verifica la existencia del medicamento.
            if(m == null){
                JOptionPane.showMessageDialog(null,
                    "Revise que haya escrito correctamente el ID del medicamento.",
                    "Error en la selección del medicamento.",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //Se verifica la cantidad disponible.
            if(!this.cadenaEsDoble(SalCant1.getText())){
                JOptionPane.showMessageDialog(null,
                    "Revise que haya escrito correctamente la cantidad a  agregar.",
                    "Error en la selección del medicamento.",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //Se verifica la completitud de los campos.
            if(SalCant1.getText().isEmpty() || Integer.parseInt(SalCant1.getText()) < 1){
                JOptionPane.showMessageDialog(null,
                    "Revise la cantidad del medicament.",
                    "Error en la selección del medicamento.",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //Se verifica si la cantidad de los que ya existen y los que se
            //intentan agregar no sobrepasan al inventario.
            if(m.getCantidad() < Integer.parseInt(SalCant1.getText())){
                JOptionPane.showMessageDialog(null,
                    "No hay suficiente inventario para surtir el medicamento.",
                    "Inventario insuficiente.",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //Si el ticket no existe ya, hay que crearlo.
            if(this.ticket == null)
                this.ticket = new Ticket();
            //Buscamos en la lista de medicamentos.
            Integer i = this.ticket.buscarEnLista(m);
            //Si ya existe, entonces se agrega verificando disponibilidad.
            if(i >= 0){
                if(this.ticket.getMedicamentos().get(i).getCantidad() + Integer.parseInt(SalCant1.getText()) >  m.getCantidad()){
                    JOptionPane.showMessageDialog(null,
                    "No hay suficiente inventario para surtir el medicamento.",
                    "Inventario insuficiente.",
                    JOptionPane.WARNING_MESSAGE);
                return;
                }
                
                this.ticket.getMedicamentos().get(i).setCantidad(
                        this.ticket.getMedicamentos().get(i).getCantidad() +
                                Integer.parseInt(SalCant1.getText())
                );
            }else{
                m.setCantidad(Integer.parseInt(SalCant1.getText()));
            
                this.ticket.agregarMedicamento(m);
            }
            
            //Se actualiza la vista de la tabla.
            DefaultTableModel tm = (DefaultTableModel)Ticket.getModel();
            tm.setRowCount(0);
            Iterator<Medicamento> it = this.ticket.getMedicamentos().iterator();
            Medicamento actual;
            while(it.hasNext()){
                actual = it.next();
                tm.addRow(actual.toReducedObjectArray());
            }
            
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    /**
     * Finaliza el proceso de compra. Almacena el nuevo ticket
     * y crea el ticket imprimible correspondiente.
     * @see Venta
     */
    private void finalizarCompra(){
        if(InExp.getText().isEmpty() || SalCant.getText().isEmpty()){
                JOptionPane.showMessageDialog(null,
                    "No se permiten campos vacíos. Favor de verificarlos.",
                    "Error generando recibo.",
                    JOptionPane.WARNING_MESSAGE);
                return;
        }
        if(!this.cadenaEsDoble(SalCant.getText())){
            JOptionPane.showMessageDialog(null,
                    "Verifique que se haya ingresado una aportación correcta.",
                    "Error generando recibo.",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(this.cadenaEsDoble(SalCant.getText()) && this.cadenaEsDoble(InExp.getText())){
            try{
                FarmaciaDAO fdao = new FarmaciaDAO();
                String nombre = fdao.obtenerNombre(Integer.parseInt(InExp.getText()));
                if(nombre == null){
                    JOptionPane.showMessageDialog(null,
                    "Verifique el número de expediente.",
                    "Error generando recibo.",
                    JOptionPane.WARNING_MESSAGE);
                    return;
                }
                this.ticket.setNombre_paciente(nombre);
                this.ticket.setFecha(new java.sql.Date(Calendar.getInstance().getTime().getTime()));
                this.ticket.setConcepto("Compra-Venta de medicamentos.");
                this.ticket.setId_paciente(Integer.parseInt(InExp.getText()));
                this.ticket.setTotal(Double.parseDouble(SalCant.getText()));
                
                Integer res = JOptionPane.showConfirmDialog(null, "Generando recibo por "
                        + this.ticket.getTotal().toString() +" a nombre de "
                        + this.ticket.getNombre_paciente() +".\n"
                        + "¿Desea continuar?.");
                if(res == JOptionPane.YES_OPTION){
                    Integer valor = fdao.guardarCompra(this.ticket);
                    Venta vt = new Venta("192.168.1.100", "Aplicacion", "postgres", "$@Lud1n73gral");
                    vt.imprimir(valor);
                    this.eliminarTicket();
                }
                else{
                    
                }
            }catch(Exception ex){
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null,
                    "Verifique el número de expediente.",
                    "Error generando recibo.",
                    JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
    /**
     * Limpia el contenido del formulario del ticket.
     */
    private void eliminarTicket(){
        this.ticket = null;
        ((DefaultTableModel)Ticket.getModel()).setRowCount(0);
        ((DefaultTableModel)ResBus.getModel()).setRowCount(0);
        NomGendeBusq.setText(null);
        SalCant1.setText(null);
        SalCant.setText(null);
        InExp.setText(null);
    }
}
